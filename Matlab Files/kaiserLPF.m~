function [kaiser_LPF, kaiser_LPF_FT,n] = kaiserLPF(A,alpha,delta_F, Fc, Fs, N)
%% Create the Low Pass Filter
    % Define Characteristics of the window        
        %Length = filterOrder(A, Fs, delta_F);
        %M = (Length-1)/2;
        
        n = linspace(0,,Z)';           % Create axis for time
        f = linspace(-Fs/2,Fs/2,N);     % Create axis for frequency

    % Truncate the ideal LPF, and shift it right by L to make it causal.
        LPF = ( (2*Fc)/Fs ) * sinc( ((2*Fc)/Fs)*(n-M) );

    % Create the bessel function for the kaiser window calculation
        beta = alpha * sqrt(n.*(2*M-n))/M; % From textbook pg.555 equation 10.2.9
        kaiser_Window = besseli(0,beta)./besseli(0,alpha); % Create the Kaiser Window

    % Finite Causal IR by multiplying hd_LPF with kaiser_Window.
        kaiser_LPF = LPF .* kaiser_Window;
            
    % Discrete Fourier Transform of Kaiser window
        kaiser_LPF_FT = real(fftshift(fft(kaiser_LPF,N)));
        
     
    %% Plot the Kaiser Window
    figure
    subplot(2,1,1)
    plot(n,real(kaiser_Window))
    title('Kaiser Window in Time Dommain')
    xlabel('n'); ylabel('Amplitude)')
    subplot(2,1,2)
    plot(f,mag2db(kaiser_LPF_FT))
    title(sprintf('Single Kaiser Windowed LPF: alpha: %f : Fc: %f', alpha, Fc))
    xlabel('n'); ylabel('Amplitude (db)');
    
end
